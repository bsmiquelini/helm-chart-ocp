{"tasks":[{"environment":{},"displayName":"login in Nexus","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"containerRegistry":"4c4b17d8-e686-4f75-8a35-9938ab4c252a","repository":"","command":"login","Dockerfile":"**/Dockerfile","buildContext":"**","tags":"$(Build.BuildId)","arguments":"","addPipelineData":"true","addBaseImageData":"true","container":""},"task":{"id":"e28912f1-0114-4464-802a-a3a35437fd16","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Dowload ImageTag","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"source":"current","project":"","pipeline":"","preferTriggeringPipeline":"false","runVersion":"latest","runBranch":"refs/heads/master","runId":"","tags":"","allowPartiallySucceededBuilds":"false","allowFailedBuilds":"false","artifact":"tag","patterns":"**/imageTag.txt","path":"$(System.DefaultWorkingDirectory)"},"task":{"id":"61f2a582-95ae-4948-b34d-a1b3c4f6a737","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Get Image to Deploy","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"script":"echo \"[+] verificando artefato em $(System.DefaultWorkingDirectory)\"\nimage_file=\"$(System.DefaultWorkingDirectory)/imageTag.txt\"\nif [[ ! -f $image_file ]] ; then\n  echo \"[-] Nenhuma imagem identificada!!!\"\n  exit 1\nelse\n  tag=`cat $image_file`\n  echo \"[+] Image:\"\n  echo \"  - $tag\"\n  echo \"##vso[task.setvariable variable=VariableTag]$tag\"\n  echo \"##vso[task.setvariable variable=VariableTag]$tag\"\n  envs=`echo $(Release.EnvironmentName) | awk '{print $NF}'`\n  VALUES_FILE=\"release/charts-manifests/$envs/values.yaml\"\n  VALUES_FILE=`echo $VALUES_FILE | tr [A-Z] [a-z]`\n  openshift_namespace=`cat $VALUES_FILE | grep namespace| cut -d \":\" -f2 | tr -d \" \"`\n  echo \"##vso[task.setvariable variable=openshift_namespace]$openshift_namespace\"\n\n  docker pull $tag\nfi\n\n","workingDirectory":"","failOnStderr":"false"},"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Login in OC Cluster","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"connectionType":"OpenShift Connection Service","openshiftService":"$(OPENSHIFT)","configurationType":"file","configurationPath":"","inlineConfig":"","version":"","cmd":"oc project $(openshift_namespace)","ignoreFlag":"false","uselocalOc":"true","proxy":""},"task":{"id":"ebaf1cdc-a60f-4e57-ba29-e3b8f80aeb1e","versionSpec":"3.*","definitionType":"task"}},{"environment":{},"displayName":"Check oc CLI","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":1,"retryCountOnTaskFailure":0,"inputs":{"script":"if type oc ; then\n  echo \"[+] Oc disponível!\"\nelse\n  echo \"[+] Instalando oc CLI...\"\n   /usr/bin/curl -s -L -o openshift-client-linux.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\n   tar xvf openshift-client-linux.tar.gz -C /usr/local/bin/ --exclude=\"README.md\"\nfi\n","workingDirectory":"","failOnStderr":"false"},"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Deploy helm and push imageStream","alwaysRun":false,"continueOnError":false,"condition":"succeeded()","enabled":true,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"inputs":{"script":"set -e\nif ! ls /usr/bin/yq &> /dev/null; then\n  echo \"[+] Instalando yq...\"\n  sudo wget https://github.com/mikefarah/yq/releases/download/v4.9.8/yq_linux_amd64 -O /usr/bin/yq\n  sudo chmod +x /usr/bin/yq\nfi\n\nenvs=`echo $(Release.EnvironmentName) | awk '{print $NF}'`\nVALUES_FILE=\"release/charts-manifests/$envs/values.yaml\"\nVALUES_FILE=`echo $VALUES_FILE | tr [A-Z] [a-z]`\nif [ ! -f \"$VALUES_FILE\" ]; then\n  echo \"[-] Arquivo $VALUES_FILE não encontrado.\"\n  exit 1\nfi\n\nimage_deploy=`cat release/tag/imageTag.txt | cut -d'/' -f 3-`\nimg=`cat release/tag/imageTag.txt`\nexport image_name=`cat release/tag/imageTag.txt | cut -d'/' -f 3-| cut -d \":\" -f1`\nimage_deploy=`/usr/bin/yq e '.projectName' \"$VALUES_FILE\"`\nexport image_name=`/usr/bin/yq e '.projectName' \"$VALUES_FILE\"`\nexport openshift_namespace=`/usr/bin/yq e '.namespace' \"$VALUES_FILE\"`\nexport openshift_registry=`/usr/bin/yq e '.dockerRegistry' \"$VALUES_FILE\"`\nexport docker_registry=$openshift_registry\nexport project_name=`/usr/bin/yq e '.projectName' \"$VALUES_FILE\"`\nexport cluster_min_replicas=`/usr/bin/yq e '.replicas.min' \"$VALUES_FILE\"`\nexport cluster_max_replicas=`/usr/bin/yq e '.replicas.max' \"$VALUES_FILE\"`\nexport cluster_target_port=`/usr/bin/yq e '.targetPort' \"$VALUES_FILE\"`\nexport cluster_container_port=`/usr/bin/yq e '.containerPort' \"$VALUES_FILE\"`\nexport cluster_host_suffix=`/usr/bin/yq e '.hostSuffix' \"$VALUES_FILE\"`\n\necho \"############################################\"\necho \"[+] Recupera token para autenticação no Openshift\"\ntoken=`oc whoami -t`\n\nif [[ -z $token ]]; then\n  echo \"  [-] Não foi possível coletar o token do usuário...\"\n  exit 1\nelse\n  echo \"  - Login Succeeded\"\nfi\necho \"############################################\"\necho \"[+] Realizando login no registro interno\"\ndocker login -u deploy-hml $openshift_registry -p ${token}\n\necho \"############################################\"\necho \"[+] Tageando imagem para envio ao Registro interno\"\nif ! docker tag $img $openshift_registry/$openshift_namespace/$project_name; then\n  echo \"  [-] Falha ao ao tagear a imagem...\"\n  exit 1\nfi\necho \"############################################\"\necho \"[+] Realizando Push da imagem para o registro interno\"\ndocker push $openshift_registry/$openshift_namespace/$project_name\n\necho \"############################################\"\necho \"[+] Clonando repositório usando system.accesstoken (helm-charts)\"\ngit clone https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bancotoyota/Devops-Corporativo/_git/helm-charts helm-charts \n\necho \"############################################\"\necho \"[+] Executando helm upgrade dry run\"\nhelm upgrade --install $BUILD_REPOSITORY_NAME --dry-run ./helm-charts -f $VALUES_FILE\n\necho \"[+] Realizando atualização do helm\"\nhelm upgrade --install $BUILD_REPOSITORY_NAME  ./helm-charts -f $VALUES_FILE\necho \"############################################\"\n\necho \"[+] Atualizando imagem do ImageStream (Rollout do deployment)\"\nif ! oc tag --source=docker image-registry.openshift-image-registry.svc:5000/$openshift_namespace/$image_deploy $image_name:latest -n $openshift_namespace; then\n  echo \"[-] Falha ao realizar a atualização do imageStream do namespace $openshift_namespace\"\n  exit 1\nelse\n  echo \"[+] Deploy realizado com sucesso no imageStream $image_name:latest no namespace $openshift_namespace\"\nfi\noc get imagestreams -n $openshift_namespace\n\n# Deletando imagens utilizadas na Release\necho \"############################################\"\nimage_delete=`docker image ls | grep \"$project_name\" | awk '{print $3}'`\nif [ -z \"$image_delete\" ]; then\n  echo \"[+] Nenhuma imagem encontrada com o nome $project_name\"\nelse\n  for image_id in $image_delete; do\n    echo \"[+] Removendo imagem com ID $image_id\"\n    docker rmi -f $image_id\n  done\nfi\n","workingDirectory":"","failOnStderr":"false"},"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","versionSpec":"2.*","definitionType":"task"}},{"environment":{},"displayName":"Logout OC cluster","alwaysRun":false,"continueOnError":true,"condition":"always()","enabled":true,"timeoutInMinutes":1,"retryCountOnTaskFailure":0,"inputs":{"script":"echo \"[+] Saindo do cluster...\"\noc logout","workingDirectory":"","failOnStderr":"false"},"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","versionSpec":"2.*","definitionType":"task"}}],"runsOn":["Agent","DeploymentGroup"],"revision":22,"createdBy":{"displayName":"Bruno Miquelini dos Santos","id":"e15bdaec-d328-4d85-b715-f5a8c590736b","uniqueName":"yaman_bss@bancotoyota.com.br"},"createdOn":"2024-06-27T17:51:53.497Z","modifiedBy":{"displayName":"Bruno Miquelini dos Santos","id":"e15bdaec-d328-4d85-b715-f5a8c590736b","uniqueName":"yaman_bss@bancotoyota.com.br"},"modifiedOn":"2024-06-27T23:11:36.480Z","comment":"","id":"a529c5f6-8537-43fd-b24a-84908730d6df","name":"Deploy Openshift - HELM","version":{"major":1,"minor":0,"patch":0,"isTest":false},"iconUrl":"https://cdn.vsassets.io/v/M240_20240611.14/_content/icon-meta-task.png","friendlyName":"Deploy Openshift - HELM","description":"Deploy de aplicações no Openshift utilizando Helm Chart","category":"Deploy","definitionType":"metaTask","author":"Bernardo Machado","demands":[],"groups":[],"inputs":[{"aliases":[],"options":{},"properties":{},"name":"OPENSHIFT","label":"OPENSHIFT","defaultValue":"","required":true,"type":"connectedService:openshift","helpMarkDown":"Select OpenShift service connection to use.","groupName":""},{"aliases":[],"options":{},"properties":{},"name":"openshift_namespace","label":"openshift_namespace","defaultValue":"$(openshift_namespace)","required":true,"type":"string","helpMarkDown":"Project in Openshift","groupName":""}],"satisfies":[],"sourceDefinitions":[],"dataSourceBindings":[],"instanceNameFormat":"Task group: Deploy Openshift - HELM $(OPENSHIFT)","preJobExecution":{},"execution":{},"postJobExecution":{},"_buildConfigMapping":{}}
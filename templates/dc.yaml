{{- if .Values.enableDeployment }}
apiVersion: {{ .Values.apiVersions.deploymentConfig }}
kind: DeploymentConfig
metadata:
  name: {{ include "project.name" . | required "[-] Requer passar o namespace no values.yaml" }}
  namespace: {{ include "project.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  annotations:
    {{- include "common.annotations" . | nindent 4 }}
spec:
  selector:
    app: {{ include "project.name" . }}
  replicas: {{ .Values.replicas.min }}
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - {{ include "project.name" . }}
        from:
          kind: ImageStreamTag
          namespace: {{ include "project.namespace" . }}
          name: '{{ default (include "project.name" .) .Values.imageStreamName }}:latest'
    - type: ConfigChange
  template:
    metadata:
      labels:
        app: {{ include "project.name" . }}
      annotations:
        {{- include "common.annotations" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "project.name" . }}
          image: >-
            {{ include "project.dockerRegistry" . }}/{{ include "project.namespace" . }}/{{ include "project.name" . }}:latest
          ports:
            - containerPort: {{ .Values.containerPort }}
              protocol: TCP
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          env:
            {{- range .Values.environment }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- range .Values.secrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  key: {{ .secretKeyRef.key }}
                  name: {{ .secretKeyRef.name }}
            {{- end }}
          livenessProbe:
            {{- if .Values.livenessProbe.enabled }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
            {{- if eq .Values.livenessProbe.type "exec" }}
            exec:
              command: {{ .Values.livenessProbe.command | toYaml | nindent 14 }}
            {{- else }}
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/actuator/liveness" }}
              port: {{ .Values.livenessProbe.port | default .Values.containerPort }}
              scheme: {{ .Values.livenessProbe.scheme | default "HTTP" }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 50 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 30 }}
            successThreshold: {{ .Values.livenessProbe.successThreshold | default 1 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 30 }}
            {{- end }}
          readinessProbe:
            {{- if .Values.readinessProbe.enabled }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
            {{- if eq .Values.readinessProbe.type "exec" }}
            exec:
              command: {{ .Values.readinessProbe.command | toYaml | nindent 14 }}
            {{- else }}
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/actuator/readiness" }}
              port: {{ .Values.readinessProbe.port | default .Values.containerPort }}
              scheme: {{ .Values.readinessProbe.scheme | default "HTTP" }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 50 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 30 }}
            successThreshold: {{ .Values.readinessProbe.successThreshold | default 1 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 30 }}
            {{- end }}
          {{- if .Values.enablePVC }}
          volumeMounts:
            {{- range .Values.VolumePersistence }}
            - mountPath: {{ .mountPath | required "[-] Requer passar o mountPath no values.yaml" }}
              name: {{ .volName | default .name | default (printf "volume-%s" (include "project.name" $)) }}
            {{- end }}
          {{- end }}
          {{- if .Values.enableEmptyDir }}
          volumeMounts:
            {{- range .Values.emptyDir }}
            - mountPath: {{ .mountPath | required "[-] Requer passar o mountPath no values.yaml" }}
              name: {{ .name | required "[-] Requer passar o name no values.yaml" }}
            {{- end }}
          {{- end }}
      volumes:
        {{- if .Values.enablePVC }}
        {{- range .Values.VolumePersistence }}
        - name: {{ .volName | default .name | default (printf "volume-%s" (include "project.name" $)) }}
          persistentVolumeClaim:
            claimName: {{ .name | default (printf "pvc-%s" (include "project.name" $)) }}
        {{- end }}
        {{- end }}
        {{- if .Values.enableEmptyDir }}
        {{- range .Values.emptyDir }}
        - name: {{ .name | required "[-] Requer passar o name no values.yaml" }}
          emptyDir: {}
        {{- end }}
        {{- end }}
      nodeSelector:
        {{- range $key, $value := .Values.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
{{- end }}
